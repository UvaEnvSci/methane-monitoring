%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\karshish\Dropbox\Fracking\Sensors\SHT15calib\rH_CALrHxxx\calib3_CALrHxx3x\2014.06.18CALH0131.CSV
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/06/24 13:55:19

%% Initialize variables.
% Change this filename to read a different file.
fileName = 'C:\Users\karshish\Dropbox\Fracking\Sensors\SHT15calib\rH_CALrHxxx\calib3_CALrHxx3x\2014.06.18CALH0131';
fileExtension = '.CSV';
filename1 = strcat(fileName,fileExtension);
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: date strings (%s)
%	column2: date strings (%s)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%f%f%f%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename1,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Convert the contents of column with dates to serial date numbers using date format string (datenum).
dataArray{1} = datenum(dataArray{1}, 'dd-mmm-yyyy');
dataArray{2} = datenum(dataArray{2}, 'HH:MM:SS');

%% Allocate imported array to column variable names
date = dataArray{:, 1};
time = dataArray{:, 2};
julian = dataArray{:, 3};
tempC = dataArray{:, 4};
rH = dataArray{:, 5};

%% Clear temporary variables
clearvars delimiter startRow formatSpec fileID dataArray ans;

%% This script uses the rH or T calibration data loaded into Matlab in the previous section
% Written by Michael van den Bossche, 2014.06.24
% The function of the script is to calculate the timestamp for an rH or T measurement relative to the start
% of the measurement, using the julian values; it takes into account restarts of the Seeeduino sketches during 
% the calibration experiments (it assumes that no significant amount of time passes during these events).

% Initialize variables
l = length(date);      % determine the number of measurements in the data file
RelTime = zeros(l,1);  % Setup the array 'RelTime', pre allocate with zeroes.
JULIAN = julian(1);    % The initial value for the Julian, a constant.
INIT = 0;              % This parameter keeps track of the relative time just before a Seeeduino sketch restart.

% Calculate the time in hours passed since the start of the experiment and
% the current measurement.

for i=2:l,
  if julian(i)<=julian(i-1) % the if statement detects whether there was a Seeeduino sketch restart.
    JULIAN = julian(i);     % if there was a restart, the JULIAN and INIT constants are reset.
    INIT = RelTime(i-1);
  end 
  RelTime(i,1)=(julian(i)-JULIAN)/3600+INIT;  % the actual calculation of the rel time.
  
end

% write the results to a csv output file.
M=horzcat(date,time,julian,RelTime,tempC,rH);                   % concatenate vertical arrays into a matrix M
Header={'date','time','julian','reltime[h]','temp[C]','rH[%]'}; % add a header
TestHeader=cellstr(Header);                                     % change the header into an array of strings
filename1=strcat(fileName,'_adjust.CSV');
csvwrite_with_headers(filename1,M,TestHeader);                  % use the function csvwrite_with_header (from Internet) to write the matrix M to csv file.
